{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d4d83cc",
   "metadata": {},
   "source": [
    "Introduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6a305919",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a3a4a47f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sales = pd.read_csv('https://raw.githubusercontent.com/Giovanni1085/UvA_CSDA_2021/main/assignments/data/sales.csv')\n",
    "df_artworks = pd.read_csv('https://raw.githubusercontent.com/Giovanni1085/UvA_CSDA_2021/main/assignments/data/tokens.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ff42560",
   "metadata": {},
   "source": [
    "# Exploring the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5c74213",
   "metadata": {},
   "source": [
    "We first wanted to first explore both datasets by using the .info() function in order to summarize the datasets. We also used the .head() function to see what the data looks like. We then used .column to give us a list of the column labels in order to know exactly which observations were made with the datasets. We followed this order for both datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "a1896f2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13485 entries, 0 to 13484\n",
      "Data columns (total 9 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   timestamp      13485 non-null  object \n",
      " 1   tokenId        13485 non-null  int64  \n",
      " 2   buyer          13485 non-null  object \n",
      " 3   seller         13485 non-null  object \n",
      " 4   eth            13485 non-null  float64\n",
      " 5   rate           13480 non-null  float64\n",
      " 6   usd            13480 non-null  float64\n",
      " 7   contract       13485 non-null  object \n",
      " 8   transactionId  13485 non-null  object \n",
      "dtypes: float64(3), int64(1), object(5)\n",
      "memory usage: 948.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df_sales.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "7b1466f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>tokenId</th>\n",
       "      <th>buyer</th>\n",
       "      <th>seller</th>\n",
       "      <th>eth</th>\n",
       "      <th>rate</th>\n",
       "      <th>usd</th>\n",
       "      <th>contract</th>\n",
       "      <th>transactionId</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-04-05T23:50:12Z</td>\n",
       "      <td>1</td>\n",
       "      <td>0xbc74c3adc2aa6a85bda3eca5b0e235ca08532772</td>\n",
       "      <td>0x860c4604fe1125ea43f81e613e7afb2aa49546aa</td>\n",
       "      <td>0.46</td>\n",
       "      <td>381.36</td>\n",
       "      <td>175.4256</td>\n",
       "      <td>0x41a322b28d0ff354040e2cbc676f0320d8c8850d</td>\n",
       "      <td>0xf1097e3617632e43b7c0a46ffeb4d741d0a67b25fb06...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-18T16:16:42Z</td>\n",
       "      <td>1</td>\n",
       "      <td>0x54d7f921785ebe46010d83c73712e80dfaff1e81</td>\n",
       "      <td>0xbc74c3adc2aa6a85bda3eca5b0e235ca08532772</td>\n",
       "      <td>75.00</td>\n",
       "      <td>174.00</td>\n",
       "      <td>13050.0000</td>\n",
       "      <td>0x41a322b28d0ff354040e2cbc676f0320d8c8850d</td>\n",
       "      <td>0xf8d3b8be83601d0351c72d2093738a4a25c70b49503b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-01-05T00:47:24Z</td>\n",
       "      <td>1</td>\n",
       "      <td>0xd0c0650cd08acd4e9553c48c60c94be04fecce43</td>\n",
       "      <td>0x54d7f921785ebe46010d83c73712e80dfaff1e81</td>\n",
       "      <td>100.00</td>\n",
       "      <td>1103.19</td>\n",
       "      <td>110319.0000</td>\n",
       "      <td>0x41a322b28d0ff354040e2cbc676f0320d8c8850d</td>\n",
       "      <td>0xc917fe7d09a750c09fd8f467d60e5adac4bbd3a5e5ea...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              timestamp  tokenId                                       buyer  \\\n",
       "0  2018-04-05T23:50:12Z        1  0xbc74c3adc2aa6a85bda3eca5b0e235ca08532772   \n",
       "1  2020-01-18T16:16:42Z        1  0x54d7f921785ebe46010d83c73712e80dfaff1e81   \n",
       "2  2021-01-05T00:47:24Z        1  0xd0c0650cd08acd4e9553c48c60c94be04fecce43   \n",
       "\n",
       "                                       seller     eth     rate          usd  \\\n",
       "0  0x860c4604fe1125ea43f81e613e7afb2aa49546aa    0.46   381.36     175.4256   \n",
       "1  0xbc74c3adc2aa6a85bda3eca5b0e235ca08532772   75.00   174.00   13050.0000   \n",
       "2  0x54d7f921785ebe46010d83c73712e80dfaff1e81  100.00  1103.19  110319.0000   \n",
       "\n",
       "                                     contract  \\\n",
       "0  0x41a322b28d0ff354040e2cbc676f0320d8c8850d   \n",
       "1  0x41a322b28d0ff354040e2cbc676f0320d8c8850d   \n",
       "2  0x41a322b28d0ff354040e2cbc676f0320d8c8850d   \n",
       "\n",
       "                                       transactionId  \n",
       "0  0xf1097e3617632e43b7c0a46ffeb4d741d0a67b25fb06...  \n",
       "1  0xf8d3b8be83601d0351c72d2093738a4a25c70b49503b...  \n",
       "2  0xc917fe7d09a750c09fd8f467d60e5adac4bbd3a5e5ea...  "
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sales.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "444137ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['timestamp', 'tokenId', 'buyer', 'seller', 'eth', 'rate', 'usd',\n",
       "       'contract', 'transactionId'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sales.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "f7b66b05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18518 entries, 0 to 18517\n",
      "Data columns (total 14 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   tokenId        18518 non-null  int64  \n",
      " 1   name           18517 non-null  object \n",
      " 2   description    18518 non-null  object \n",
      " 3   tags           18517 non-null  object \n",
      " 4   image          18518 non-null  object \n",
      " 5   media          9940 non-null   object \n",
      " 6   type           9940 non-null   object \n",
      " 7   size           9940 non-null   float64\n",
      " 8   dimensions     9708 non-null   object \n",
      " 9   creator        18518 non-null  object \n",
      " 10  owner          18518 non-null  object \n",
      " 11  timestamp      16995 non-null  object \n",
      " 12  contract       18518 non-null  object \n",
      " 13  transactionId  16995 non-null  object \n",
      "dtypes: float64(1), int64(1), object(12)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df_artworks.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "02220d94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tokenId</th>\n",
       "      <th>name</th>\n",
       "      <th>description</th>\n",
       "      <th>tags</th>\n",
       "      <th>image</th>\n",
       "      <th>media</th>\n",
       "      <th>type</th>\n",
       "      <th>size</th>\n",
       "      <th>dimensions</th>\n",
       "      <th>creator</th>\n",
       "      <th>owner</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>contract</th>\n",
       "      <th>transactionId</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>AI Generated Nude Portrait #1</td>\n",
       "      <td>Robbie Barrat, AI Generated, 2018</td>\n",
       "      <td>Nude Portrait  AI  Painting  Portrait  Generat...</td>\n",
       "      <td>https://ipfs.pixura.io/ipfs/QmX4ECCmA4HZSPxzsg...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0x860c4604fe1125ea43f81e613e7afb2aa49546aa</td>\n",
       "      <td>0xd0c0650cd08acd4e9553c48c60c94be04fecce43</td>\n",
       "      <td>2018-04-05T23:20:48Z</td>\n",
       "      <td>0x41a322b28d0ff354040e2cbc676f0320d8c8850d</td>\n",
       "      <td>0xf3e68d3a53b1bb3a2cdb4aa3a6c871626e6dcf7b8df1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>AI Generated Nude Portrait #2</td>\n",
       "      <td>Robbie Barrat, AI Generated, 2018</td>\n",
       "      <td>Nude Portrait  AI  Painting  Portrait  Generat...</td>\n",
       "      <td>https://ipfs.pixura.io/ipfs/QmRe3WvttmMR7mELga...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0x860c4604fe1125ea43f81e613e7afb2aa49546aa</td>\n",
       "      <td>0x6853a596d6d7264d3622546da3b891b6fe17eb82</td>\n",
       "      <td>2018-04-05T23:49:27Z</td>\n",
       "      <td>0x41a322b28d0ff354040e2cbc676f0320d8c8850d</td>\n",
       "      <td>0x8fb08cb45e1a0032dccd0951812dba7a8ebe5b255bdd...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>AI Generated Nude Portrait #3</td>\n",
       "      <td>Robbie Barrat, AI Generated, 2018</td>\n",
       "      <td>Nude Portrait  AI  Painting  Portrait  Generat...</td>\n",
       "      <td>https://ipfs.pixura.io/ipfs/QmYCyvs9JwKTAChpri...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0x860c4604fe1125ea43f81e613e7afb2aa49546aa</td>\n",
       "      <td>0x8a0a834077a8ecea4983e2288f81afb2c6764116</td>\n",
       "      <td>2018-04-06T00:07:31Z</td>\n",
       "      <td>0x41a322b28d0ff354040e2cbc676f0320d8c8850d</td>\n",
       "      <td>0xdf2952f467fddc9f81f6beada8dc2bed1ae4e497c0d2...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   tokenId                           name                        description  \\\n",
       "0        1  AI Generated Nude Portrait #1  Robbie Barrat, AI Generated, 2018   \n",
       "1        2  AI Generated Nude Portrait #2  Robbie Barrat, AI Generated, 2018   \n",
       "2        3  AI Generated Nude Portrait #3  Robbie Barrat, AI Generated, 2018   \n",
       "\n",
       "                                                tags  \\\n",
       "0  Nude Portrait  AI  Painting  Portrait  Generat...   \n",
       "1  Nude Portrait  AI  Painting  Portrait  Generat...   \n",
       "2  Nude Portrait  AI  Painting  Portrait  Generat...   \n",
       "\n",
       "                                               image media type  size  \\\n",
       "0  https://ipfs.pixura.io/ipfs/QmX4ECCmA4HZSPxzsg...   NaN  NaN   NaN   \n",
       "1  https://ipfs.pixura.io/ipfs/QmRe3WvttmMR7mELga...   NaN  NaN   NaN   \n",
       "2  https://ipfs.pixura.io/ipfs/QmYCyvs9JwKTAChpri...   NaN  NaN   NaN   \n",
       "\n",
       "  dimensions                                     creator  \\\n",
       "0        NaN  0x860c4604fe1125ea43f81e613e7afb2aa49546aa   \n",
       "1        NaN  0x860c4604fe1125ea43f81e613e7afb2aa49546aa   \n",
       "2        NaN  0x860c4604fe1125ea43f81e613e7afb2aa49546aa   \n",
       "\n",
       "                                        owner             timestamp  \\\n",
       "0  0xd0c0650cd08acd4e9553c48c60c94be04fecce43  2018-04-05T23:20:48Z   \n",
       "1  0x6853a596d6d7264d3622546da3b891b6fe17eb82  2018-04-05T23:49:27Z   \n",
       "2  0x8a0a834077a8ecea4983e2288f81afb2c6764116  2018-04-06T00:07:31Z   \n",
       "\n",
       "                                     contract  \\\n",
       "0  0x41a322b28d0ff354040e2cbc676f0320d8c8850d   \n",
       "1  0x41a322b28d0ff354040e2cbc676f0320d8c8850d   \n",
       "2  0x41a322b28d0ff354040e2cbc676f0320d8c8850d   \n",
       "\n",
       "                                       transactionId  \n",
       "0  0xf3e68d3a53b1bb3a2cdb4aa3a6c871626e6dcf7b8df1...  \n",
       "1  0x8fb08cb45e1a0032dccd0951812dba7a8ebe5b255bdd...  \n",
       "2  0xdf2952f467fddc9f81f6beada8dc2bed1ae4e497c0d2...  "
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_artworks.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "d2fd883b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tokenId', 'name', 'description', 'tags', 'image', 'media', 'type',\n",
       "       'size', 'dimensions', 'creator', 'owner', 'timestamp', 'contract',\n",
       "       'transactionId'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_artworks.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adf689ac",
   "metadata": {},
   "source": [
    "# Looking at the ethereum and size variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87eb7304",
   "metadata": {},
   "source": [
    "We now want look at these 2 variables: eth and size. Because we are going to have some NaN in the results later on, removal of certain transactions are necessary because we then get a more complete picture of the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02409b84",
   "metadata": {},
   "source": [
    "We first have to make the dataframes for the df_sales and df_artworks to join the variables in one table. We use the tokenId observations to join them together. *why?*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "678ac5d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "sales=pd.DataFrame({\n",
    "    \"Token Id\": df_sales['tokenId'],\n",
    "    \"Ethereum\": df_sales['eth'],\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "038dd357",
   "metadata": {},
   "outputs": [],
   "source": [
    "artworks=pd.DataFrame({\n",
    "    \"Token Id\": df_artworks['tokenId'],\n",
    "    \"Size\": df_artworks['size'],\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "f4bf5291",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Token Id</th>\n",
       "      <th>Ethereum</th>\n",
       "      <th>Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.46</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>75.00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>100.00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>0.46</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1.85</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13481</th>\n",
       "      <td>18471</td>\n",
       "      <td>1.00</td>\n",
       "      <td>36912741.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13482</th>\n",
       "      <td>18488</td>\n",
       "      <td>0.60</td>\n",
       "      <td>42666561.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13483</th>\n",
       "      <td>18489</td>\n",
       "      <td>5.00</td>\n",
       "      <td>48432159.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13484</th>\n",
       "      <td>18490</td>\n",
       "      <td>5.00</td>\n",
       "      <td>48044375.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13485</th>\n",
       "      <td>18491</td>\n",
       "      <td>5.00</td>\n",
       "      <td>47034696.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13486 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Token Id  Ethereum        Size\n",
       "0             1      0.46         NaN\n",
       "1             1     75.00         NaN\n",
       "2             1    100.00         NaN\n",
       "3             2      0.46         NaN\n",
       "4             2      1.85         NaN\n",
       "...         ...       ...         ...\n",
       "13481     18471      1.00  36912741.0\n",
       "13482     18488      0.60  42666561.0\n",
       "13483     18489      5.00  48432159.0\n",
       "13484     18490      5.00  48044375.0\n",
       "13485     18491      5.00  47034696.0\n",
       "\n",
       "[13486 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_merger = pd.merge(sales,artworks,on='Token Id')\n",
    "display(df_merger)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "4dc091e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.348600e+04\n",
       "mean     1.475033e+00\n",
       "std      3.953244e+00\n",
       "min      1.000000e-07\n",
       "25%      2.200000e-01\n",
       "50%      5.000000e-01\n",
       "75%      1.250000e+00\n",
       "max      1.595000e+02\n",
       "Name: Ethereum, dtype: float64"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merger['Ethereum'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bce011b",
   "metadata": {},
   "source": [
    "To spot the outliers in the ethereum distribution we use a Boxplot to easily see if there are outliers. Outliers are extremes and can influence the outcome of an analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "2a7f0b71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Ethereum'>"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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ktTR0VGYq6mpSe3t7WPGcrncmHknTJig9vb2xHWS5qxWadak7Elr5XK5xLVrkakeKt1PNK5637ZcCnjPnj0ey46SVI7jFVypFStWqK2tLfEybW1tMjO1tbWNO8fq1auVzWYLj4wymYxuu+02LV++XGY26hHTypUrtWLFijHjI5dLembR0tJSmGv58uVqaWkZM5bNZrVixYox+1bu122S5qxW6T6Xe1aUlDVp7VpkqodK9xONq963ravm19CKC7e9vV2LFi3S9OnTC2Pz5s3Thg0bZGaaPXu2JBU+T5o0SZI0ZcoUZbNZLVy4sPCTcMOGDZKkJUuWFObu6OjQokWL1N7ergceeEBSVO7z58/X/fffLyl69Dsil8tp6tSphUdII5fP5XJauHChFixYMGreXC6nBQsWaO7cuZo8efK4j6yKs5Qb6+jo0IIFCzR//vzCWuNJmrNapftc6Vrl1q5FpnqodD/RuOp527JqXkhqbW0Nvb29VS9y77336uy581JTs2751YXaunWr1q9fL0naunVr1fMBwEeJme0PIbSWjl81j4ABoNFQwADghAIGACcUMAA4oYABwAkFDABOKGAAcEIBA4ATChgAnFDAAOCEAgYAJxQwADihgAHACQUMAE4oYABwQgEDgBMKGACcUMAA4IQCBgAnFDAAOKGAAcAJBQwATihgAHBCAQOAEwoYAJxQwADghAIGACcUMAA4oYABwAkFDABOKGAAcEIBA4ATChgAnFDAAOCEAgYAJxQwADihgAHACQUMAE6a01hk8uTJOnv+wqixbDabxtIA0LBSKeAbb7xRp9/9xaixtWvXprE0ADQsDkEAgBMKGACcUMAA4IQCBgAnFDAAOKGAAcAJBQwATihgAHBCAQOAEwoYAJxQwADghAIGACcUMAA4oYABwAkFDABOKGAAcEIBA4ATChgAnFDAAOCEAgYAJxQwADihgAHACQUMAE4oYABwQgEDgBMKGACcUMAA4IQCBgAnFDAAOKGAAcAJBQwATihgAHBCAQOAEwoYAJxQwADghAIGACcUMAA4oYABwAkFDABOKGAAcNKc2krDQ6ktBQAfBakUcDab1cmTJwunAQCShRAq3ri1tTX09vbWMQ4AfPyY2f4QQmvpOMeAAcAJBQwATihgAHBCAQOAEwoYAJxQwADghAIGACcUMAA4oYABwAkFDABOKGAA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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df_merger['Ethereum'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77f090c5",
   "metadata": {},
   "source": [
    "Here we can spot the outliers on the right side of the boxplot. *more explanation*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "315c6994",
   "metadata": {},
   "source": [
    "Next we look at the distribution of ethereum density over the amount of sales transactions. We plot a histogram in combination with a kernel density. *explain why and what it represents*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "2d59d276",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\31623\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Ethereum', ylabel='Density'>"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df_merger['Ethereum'], hist=True, kde=True, bins=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3d233bb",
   "metadata": {},
   "source": [
    "The outcome is a heavy-tailed distribution. *what does this mean?*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "bb1b2539",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6.377000e+03\n",
       "mean     1.803513e+07\n",
       "std      1.624934e+07\n",
       "min      1.230000e+02\n",
       "25%      4.332670e+06\n",
       "50%      1.225512e+07\n",
       "75%      2.963549e+07\n",
       "max      5.241852e+07\n",
       "Name: Size, dtype: float64"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merger['Size'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fda3940",
   "metadata": {},
   "source": [
    "In the example of the dataset df_artworks.head() we could see that there are values missing from the 'size' column. We can use the .isnull() together with the .sum() function to see how many null values there are within the 'size' column in relation to the amount of transactions there have been made. When dividing the amount of null values with the length of df_merger you get the percentage of null values that make up the 'Size' column. Knowing how big this percentage is will help us decide what to do with those vales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "668b1957",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52.71392555242473"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df_merger['Size'].isnull().sum())/(len(df_merger)/100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3c47fe5",
   "metadata": {},
   "source": [
    "Because such a large part of the size variables are missing we decided to exclude them from the dataset to get a better view of the distribution of the size among the amount of sales transactions with the actually known variables. We have used a piece of code from to remove the NaN values. Data to Fish, 2021. “How to Drop Rows with NAN Values in Pandas DataFrame.” https://datatofish.com/dropna/. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "eca87755",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Token Id  Ethereum        Size\n",
      "0         8584     13.50  46778742.0\n",
      "1         8585     10.00  24084640.0\n",
      "2         8589      1.10  28979560.0\n",
      "3         8590      0.52   7883860.0\n",
      "4         8591      3.14  26242812.0\n",
      "...        ...       ...         ...\n",
      "6372     18471      1.00  36912741.0\n",
      "6373     18488      0.60  42666561.0\n",
      "6374     18489      5.00  48432159.0\n",
      "6375     18490      5.00  48044375.0\n",
      "6376     18491      5.00  47034696.0\n",
      "\n",
      "[6377 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "df_merger = df_merger.apply (pd.to_numeric, errors='coerce')\n",
    "df_merger = df_merger.dropna()\n",
    "df_merger = df_merger.reset_index(drop=True)\n",
    "print(df_merger)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4c1dc75",
   "metadata": {},
   "source": [
    "As can be seen from printing out df_merger we now have less rows due to the removal of all the rows containing an NaN value in the Size column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "458a3a09",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\31623\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Size', ylabel='Density'>"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df_merger['Size'], hist=True, kde=True, bins=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aae914f7",
   "metadata": {},
   "source": [
    "We would classify this as a heavy-tailed or normal distribution? *more explanation*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8355582",
   "metadata": {},
   "source": [
    "# Correlation Between Ethereum and Size"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f18ba17",
   "metadata": {},
   "source": [
    "To look at the possible relation between the variables of ethereum and size we first want to measure the covariance and correlation between them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "0ed5ab10",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ethereum</th>\n",
       "      <th>Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Ethereum</th>\n",
       "      <td>1.968947e+01</td>\n",
       "      <td>8.170469e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Size</th>\n",
       "      <td>8.170469e+06</td>\n",
       "      <td>2.640410e+14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Ethereum          Size\n",
       "Ethereum  1.968947e+01  8.170469e+06\n",
       "Size      8.170469e+06  2.640410e+14"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merger[['Ethereum', 'Size']].cov()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aca7d299",
   "metadata": {},
   "source": [
    "What does this mean?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "e3bdf98e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ethereum</th>\n",
       "      <th>Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Ethereum</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.113317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Size</th>\n",
       "      <td>0.113317</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Ethereum      Size\n",
       "Ethereum  1.000000  0.113317\n",
       "Size      0.113317  1.000000"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merger[['Ethereum', 'Size']].corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd6879c8",
   "metadata": {},
   "source": [
    "*What does this mean?*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2191ebe9",
   "metadata": {},
   "source": [
    "To visualize the correlation between the variables we want to make a scatterplot. The values will be scattered among two axes. *more info* "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "960f6551",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Size', ylabel='Ethereum'>"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x=df_merger.Size,y=df_merger.Ethereum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba13bc58",
   "metadata": {},
   "source": [
    "*explain what this means for the correlation*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acadc51d",
   "metadata": {},
   "source": [
    "# The Trend of Sales Over Time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6381ed1",
   "metadata": {},
   "source": [
    "We further want to see what the trend of sales is over time. This means we look at the amount of sales that have occured over a certain timespan. We use the timestamps from df_sales because they indicate at which time a token was sold. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "id": "8b0c6911",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       TokenId             Timestamp\n",
      "0            1  2018-04-05T23:50:12Z\n",
      "1            1  2020-01-18T16:16:42Z\n",
      "2            1  2021-01-05T00:47:24Z\n",
      "3            2  2018-04-05T23:59:06Z\n",
      "4            2  2018-09-05T21:06:04Z\n",
      "...        ...                   ...\n",
      "13480    18471  2021-01-20T17:39:18Z\n",
      "13481    18488  2021-01-21T13:01:58Z\n",
      "13482    18489  2021-01-21T05:14:10Z\n",
      "13483    18490  2021-01-21T05:47:26Z\n",
      "13484    18491  2021-01-21T05:49:05Z\n",
      "\n",
      "[13485 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "time=pd.DataFrame({\n",
    "    'TokenId': df_sales['tokenId'],\n",
    "    'Timestamp': df_sales['timestamp'],\n",
    "})\n",
    "\n",
    "print(time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "id": "7374242c",
   "metadata": {},
   "outputs": [],
   "source": [
    "time['Timestamp'] = pd.to_datetime(time['Timestamp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "id": "d1d62309",
   "metadata": {},
   "outputs": [],
   "source": [
    "time['Timestamp'] = time['Timestamp'].dt.strftime('%Y-%m')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "id": "8fed8b8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       TokenId Timestamp\n",
      "0            1   2018-04\n",
      "1            1   2020-01\n",
      "2            1   2021-01\n",
      "3            2   2018-04\n",
      "4            2   2018-09\n",
      "...        ...       ...\n",
      "13480    18471   2021-01\n",
      "13481    18488   2021-01\n",
      "13482    18489   2021-01\n",
      "13483    18490   2021-01\n",
      "13484    18491   2021-01\n",
      "\n",
      "[13485 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "print(time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a14294d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8d266dd6",
   "metadata": {},
   "source": [
    "5.Check whether this dataset is robust to sampling,and if so how many datapoints you would need to sample to get the analyses you have just performed（steps 1-4）to have similar results to the full datasets.Briefly comment on your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4db97255",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tokenId</th>\n",
       "      <th>eth</th>\n",
       "      <th>rate</th>\n",
       "      <th>usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>13485.000000</td>\n",
       "      <td>1.348500e+04</td>\n",
       "      <td>13480.000000</td>\n",
       "      <td>13480.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8347.683723</td>\n",
       "      <td>1.475068e+00</td>\n",
       "      <td>300.030489</td>\n",
       "      <td>550.502275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4908.173818</td>\n",
       "      <td>3.953388e+00</td>\n",
       "      <td>212.168345</td>\n",
       "      <td>2327.404218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e-07</td>\n",
       "      <td>83.900000</td>\n",
       "      <td>0.000029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4233.000000</td>\n",
       "      <td>2.200000e-01</td>\n",
       "      <td>166.220000</td>\n",
       "      <td>45.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8183.000000</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>231.610000</td>\n",
       "      <td>118.495650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12295.000000</td>\n",
       "      <td>1.250000e+00</td>\n",
       "      <td>378.440000</td>\n",
       "      <td>387.980000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>18491.000000</td>\n",
       "      <td>1.595000e+02</td>\n",
       "      <td>1377.750000</td>\n",
       "      <td>121059.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            tokenId           eth          rate            usd\n",
       "count  13485.000000  1.348500e+04  13480.000000   13480.000000\n",
       "mean    8347.683723  1.475068e+00    300.030489     550.502275\n",
       "std     4908.173818  3.953388e+00    212.168345    2327.404218\n",
       "min        1.000000  1.000000e-07     83.900000       0.000029\n",
       "25%     4233.000000  2.200000e-01    166.220000      45.850000\n",
       "50%     8183.000000  5.000000e-01    231.610000     118.495650\n",
       "75%    12295.000000  1.250000e+00    378.440000     387.980000\n",
       "max    18491.000000  1.595000e+02   1377.750000  121059.000000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sales.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f74dc649",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tokenId</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>18518.000000</td>\n",
       "      <td>9.940000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9263.921914</td>\n",
       "      <td>1.840284e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5349.062750</td>\n",
       "      <td>1.661533e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4631.250000</td>\n",
       "      <td>4.209887e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9264.500000</td>\n",
       "      <td>1.250973e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>13895.750000</td>\n",
       "      <td>3.075106e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>18527.000000</td>\n",
       "      <td>5.241852e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            tokenId          size\n",
       "count  18518.000000  9.940000e+03\n",
       "mean    9263.921914  1.840284e+07\n",
       "std     5349.062750  1.661533e+07\n",
       "min        1.000000  0.000000e+00\n",
       "25%     4631.250000  4.209887e+06\n",
       "50%     9264.500000  1.250973e+07\n",
       "75%    13895.750000  3.075106e+07\n",
       "max    18527.000000  5.241852e+07"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_artworks.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "741cb179",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_1sampResult(statistic=-103.53966361008828, pvalue=0.0)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats as st\n",
    "st.ttest_1samp(a=df_sales['eth'], popmean=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "30dda18d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9137560252131999"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "low1 = np.quantile(df_sales['eth'], 0.05)\n",
    "high1 = np.quantile(df_sales['eth'], 0.95)\n",
    "resample_df1 = df_sales[df_sales['eth'].between(low1, high1)]\n",
    "resample_point = resample_df1.shape[0] / df_sales.shape[0]\n",
    "resample_point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "94c9a5d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_1sampResult(statistic=110.42543032565507, pvalue=0.0)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "artwork = df_artworks['size'].dropna()\n",
    "st.ttest_1samp(a=artwork, popmean=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ccddb2dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48309752673074846"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "low2 = np.quantile(artwork, 0.05)\n",
    "high2 = np.quantile(artwork, 0.95)\n",
    "resample_df2 = df_artworks[df_artworks['size'].between(low2, high2)]\n",
    "resample_point = resample_df2.shape[0] / df_artworks.shape[0]\n",
    "resample_point"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
